# V2: USING Astar to go from start to end zone:
import turtle
import heapq

# Initialize the screen
screen = turtle.Screen()
screen.setup(width=600, height=600)
screen.title("A* Turtle Navigation")

# Create the drawing turtle for zones
drawer = turtle.Turtle()
drawer.penup()
drawer.speed(0)  # fastest speed

# Draw start and target zones
def draw_zone(x, y, color):
    drawer.goto(x, y)
    drawer.fillcolor(color)
    drawer.begin_fill()
    for _ in range(4):
        drawer.forward(50)
        drawer.left(90)
    drawer.end_fill()

draw_zone(-275, -275, "green")  # Start zone
draw_zone(225, 225, "red")  # Target zone

# Create the turtle
t = turtle.Turtle()
t.shape("turtle")
t.color("blue")
t.speed(1)
t.penup()
t.goto(-250, -250)  # Start position, centered in the start zone
t.pendown()

# A* Algorithm Setup
class Node:
    def __init__(self, x, y, parent=None):
        self.x = x
        self.y = y
        self.parent = parent
        self.g = 0  # Cost from start to current node
        self.h = 0  # Estimated cost from current to end
        self.f = 0  # Total cost

    def __lt__(self, other):
        return self.f < other.f

def heuristic(x1, y1, x2, y2):
    # Using Manhattan distance as heuristic
    return abs(x1 - x2) + abs(y1 - y2)

def a_star(start, end):
    # Open and closed sets
    open_set = []
    closed_set = set()
    start_node = Node(start[0], start[1])
    end_node = Node(end[0], end[1])
    heapq.heappush(open_set, (start_node.f, start_node))

    while open_set:
        current_node = heapq.heappop(open_set)[1]
        closed_set.add((current_node.x, current_node.y))

        # Check if we reached the end
        if current_node.x == end_node.x and current_node.y == end_node.y:
            path = []
            while current_node:
                path.append((current_node.x, current_node.y))
                current_node = current_node.parent
            return path[::-1]  # Return reversed path

        # Generate children
        for new_position in [(0, 50), (0, -50), (50, 0), (-50, 0)]:  # Adjacent squares
            node_position = (current_node.x + new_position[0], current_node.y + new_position[1])
            if node_position in closed_set:
                continue
            
            node = Node(*node_position, parent=current_node)
            if node in open_set:
                continue
            
            node.g = current_node.g + 50
            node.h = heuristic(node.x, node.y, end_node.x, end_node.y)
            node.f = node.g + node.h
            
            heapq.heappush(open_set, (node.f, node))

# Pathfinding from start to end
path = a_star((-250, -250), (250, 250))
for x, y in path:
    t.goto(x, y)

drawer.hideturtle()
t.hideturtle()
screen.mainloop()
